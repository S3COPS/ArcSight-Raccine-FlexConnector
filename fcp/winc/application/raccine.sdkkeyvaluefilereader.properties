key.delimiter=&&
key.value.delimiter==
key.regexp=([^&=]+)
comments.starts.with=#
additionaldata.enabled=true
#
event.deviceVendor=__getVendor("Raccine")
event.deviceProduct=__stringConstant("Raccine")
#

## General Device Custom Strings:
#
## Are the logs reporting "simulation mode" or blocking?
event.deviceCustomString6=__oneOf(__multilineRegexToken(%1,".*(simulation mode).*"),__stringConstant("blocking mode"))
event.deviceCustomString6Label=__stringConstant("Mode")
#
## Currently all data is contained in a single token %1
event.message=%1
#
# Override the default severity map of "low"
severity.map.veryhigh.if.deviceSeverity=Critical
severity.map.high.if.deviceSeverity=Warning
#############################################
## Conditional Maps
#
conditionalmap.count=1
conditionalmap[0].field=event.externalId
conditionalmap[0].mappings.count=1
conditionalmap[0].mappings[0].values=2
#  // Eventlog  message = L"Raccine detected malicious activity:\r\n" + sCommandLine + L"\r\n(simulation mode)";
conditionalmap[0].mappings[0].event.name=__stringConstant("Raccine detected malicious activity")
conditionalmap[0].mappings[0].event.deviceCustomString1=__multilineRegexToken(%1,".*\\\:\\s+(.*)(?:\\s\\\(simulation mode\\\))?")
conditionalmap[0].mappings[0].event.deviceCustomString1Label=__stringConstant("Command Line")
# Severity set to warning until the tool is stable, tuned for false positives etc.
conditionalmap[0].mappings[0].event.deviceSeverity=__stringConstant("Warning")
#
#############################################
